{
  
    
        "post0": {
            "title": "SASS 문법",
            "content": "주석 . // 컴파일되지 않는 주석 /* 컴파일되는 주석 */ . . 중첩 . .btn{ position:absolute; &amp;.action{ color:red; } } . .btn{ position:absolute; } .btn.active{ color:red; } . . 중첩 벗어나기 . .list{ $w:100px; $h:50px; li{ width:$w; height:$h; } @at-root .box{ width:$w; height:$h; } } . .list li{ width:100px; height:50px; } .box{ width:100px; height:50px; } . . 중첩된 속성 . .box{ font:{ weight:bold; size:10px; family:sans-serif; }; margin: { top:10px; left:20px; }; padding: { bottom:40px; right:30px; } } . . 변수 . $변수이름 : 속성값; . $color-primary:#444444; $url-image:&quot;assets/images/&quot;; $w:200px; .box{ width:$w; margin-left:$w; background:$color-primary url($url-image + &quot;bg.jpg&quot;); } . . 변수 유효범위 . .box1{ $color:#111; background:$color; } //Error .box2{ background:$color; } . . 변수 재할당 . $red:#ff0000; $blue:#0000ff; $color-primary:$blue; $color-danger:$red; .box{ color:$color-primary; background:$color-danger; } . . 변수 전역 설정 . .box1{ $color:#111 !global; background:$color; } .box2{ background:$color; } . . 변수 초깃값 설정 . $color-primary:red; .box{ $color-primary:blue !default; background:$color-primary; } . . 변수 문자보간 . $family: unquote(&quot;Droid_Sans&quot;); @import url(&quot;http://fonts.googleapis.com/css?family=#{family}&quot;) . 내장함수 unquote()는 문자에서 따옴표를 제거합니다. . . 가져오기 . @import로 외부에서 가져온 Sass 파일은 모두 단일 CSS 출력 파일로 병합됩니다. 또한 가져온 파일에 정의된 모든 변수 또는 Mixins 등을 주 파일에서 사용할 수 있습니다. . @import &quot;hello.css&quot;; @import &quot;http://hello.com/hello&quot;; @import url(hello); @import &quot;hello&quot; screen; . . 여러파일 가져오기, 파일 분할 . @import &quot;header&quot;, &quot;footer&quot; . 컴파일시, 분리되어서 컴파일이 된다. . @import &quot;_header&quot;, &quot;_footer&quot; . . 연산 -숫자 . 일반적으로 절대값을 나타내는 PX 단위로 연산을 합니다. 상대적 단위 (%, em, vw등)의 연산의 경우 CSS calc()로 연산해야 합니다. . width:calc(50%-20px) . 나누기 연산은 ()로 한다 . height:(100px /2) /* 추가 가능 */ $x:100px; //변수시 가능 width:$w /2; //2개 이상 연산시 가능 font-size:10px +12px /3 . . 연산 -문자 . 문자 연산에는 +가 사용됩니다. 문자 연산의 결과는 첫번째 피연산자를 기준으로 합니다. 첫 번째 피연산자에 따옴표가 붙어있다면 연산 결과는 따옴표로 묶습니다. 반대로 첫 번째 피연산자에 따옴표가 붙어있지 않다면 연산 결과도 따옴표를 처리하지 않습니다. . div::after{ content:&quot;Hello&quot;+World; flex-flow: row +&quot;-reverse&quot;+&quot;&quot;+wrap } . div::after{ content:&quot;Hello World&quot; flex-flow:row-reverse wrap; } . . 연산 -논리 . $w:100px; .item{ display:block; @if($w &gt; 50px or $w &lt;90px){ width:400px; } } . . 재활용 -Mixin, Include01 . @mixin size ($w:100px, $h:100px){ width:$w; height:$h; } .box1{ @include:size; } .box2{ @include:size($h:300px); } . .box1{ width:100px; height:100px; } .box2{ width:100px; height:100px; } . . 재활용 -Mixin, Include02 . @mixin 믹스인이름{ 스타일; } @mixin large-text{ font-size:22px; font-weight:bold; font-family:sans-serif; color:orange; } . @mixin large-text{ font:{ size:22px; weight:bold; family:sans-serif; } color:orange; &amp;::after{ content:&quot;!!&quot;; } span.icon{ background:url(&quot;/images/icon.png&quot;); } } .box1{ @include large-text; } . .box1{ font-size:22px; font-weight:bold; font-family:sans-serif; color:orange; } .box1::after{ content:&quot;!!&quot;; } .box1 span.icon{ background:url(&quot;/images/icon.png&quot;); } . . 재활용 -인수 . 개념 . @mixin 믹스인이름($매개변수:parameters){ 스타일; } @include 믹스인이름(인수); . @mixin dash-line($width, $color){ border:$width dashed $color; } .box1{ @include dash-line(1px, red);} .box2{ @include dash-line(4px, blue);} . .box1{ border:1px dashed red; } .box2{ border:4px dashed blue; } . . 재활용 -인수 -기본값 설정 . 개념 . @mixin 믹스인이름($매개변수:기본값){ 스타일; } @include 믹스인이름(인수); . @mixin dash-line($width:1px, $color:black){ border:$width dashed $color; } .box1{ @include dash-line;} .box2{ @include dash-line(4px);} . .box1{ border:1px dashed black; } .box2{ border:4px dashed black; } . . 재활용 -인수 -키워드 인수 . 개념 . @mixin 믹스인이름($매개변수A:기본값, $매개변수B:기본값){ 스타일; } @include 믹스인이름($매개변수B:인수); . . 재활용 -인수 -가변인수 . 개념 . @mixin 믹스인이름($매개변수...){ 스타일; } @include 믹스인이름(인수A, 인수B, 인수C); . @mixin var($w, $h, $bg...){ width:$w; height:$h; background:$bg; } .box{ @include var( 100px, 200px, url(&quot;image/a.png&quot;) no-repeat 10px 20px, url(&quot;image/b.png&quot;) no-repeat, ); } . .box{ width:100px; height:200px; background:url(&quot;image/a.png&quot;) no-repeat 10px 20px, url(&quot;image/b.png&quot;) no-repeat, } . @mixin font( $style:normal, $weight:normal, $size:16px, $family:sans-serif ){ font:{ style:$style; weight:$weight; size:$size; family:$%family; } } div{ //매개변수 순서와 개수에 맞게 전달 $font-value:italic, bold, 16px, sans-serif; @include font($font-value...); } span{ //필요한 값만 키워드 인수로 변수에 담아 전달 $font-value:(style:italic, size:22px); @include font($font-value...); } a{ //필요한 값만 키워드 인수로 전달 @include font((weight:900, family:monospace)...); } . div{ font-style:italic; font-weight:bold; font-size:16px; font-family:sans-serif; } span{ font-style:italic; font-weight:normal; font-size:22px; font-family:sans-serif; } a{ font-style:normal; font-weight:900; font-size:16px; font-family:monospace; } . . 재활용 -Content . 개념 . @mixin 믹스인이름(){ 스타일; @content; } @include 믹스인이름(인수){ //스타일 블록 } . @mixin icon($url){ &amp;::after{ content:$url; @content; } } .box1{ @include icon(&quot;image/icon1.png&quot;); } .box2{ @inlcude icon(&quot;image/icon2.png&quot;){ display:block; position:absolute; width:100px; height:100px; } } . .box1::afte{ content:&quot;image/icon1.png&quot;; } .box2::after{ content:&quot;image/icon2.png&quot;; display:block; position:absolute; width:100px; height:100px; } . . 재활용 -Content . 개념 . @mixin 믹스인이름(){ 스타일; @content; } @include 믹스인이름(인수){ //스타일 블록 } . @mixin icon($url){ &amp;::after{ content:$url; @content; } } .box1{ @include icon(&quot;image/icon1.png&quot;); } .box2{ @inlcude icon(&quot;image/icon2.png&quot;){ display:block; position:absolute; width:100px; height:100px; } } . .box1::afte{ content:&quot;image/icon1.png&quot;; } .box2::after{ content:&quot;image/icon2.png&quot;; display:block; position:absolute; width:100px; height:100px; } . . 확장 -Extend . 개념 . @extend 선택자; . .btn{ padding:10px; margin:10px; background:blue; } .btn-danger{ @extend .btn; background:red; } . .btn, .btn-danger{ padding:10px; margin:10px; background:blue; } .btn-danger{ background:red; } . . 확장 -추천하지 않는 이유 . .container{ width:300px; height:300px; background:red; .item{ width:200px; height:200px; background:blue; .icon{ width:100px; height:100px; background:green; } } } .wrapper{ .new-icon{ @extend .icon; } } . .container{ width:300px; height:300px; background:red; } .container .item{ width:200px; height:200px; background:blue; } .container .item .icon, .container .item .wrapper .new-icon, .wrapper .container .item .new-icon{ width:100px; height:100px; background:green; } . . 함수 - IF . if(조건, 표현식1, 표현식2) 삼항 함수와 비슷 . $width:550px; div{ width:if($width &gt; 300px, $width, null) } . div{ width:550px; } . . 조건문 - IF(지시어) . @if 지시어는 조건에 따른 분기 처리가 가능하며, if문(if statements)과 유사합니다. 같이 사용할 수 있는 지시어는 @else if 가 있습니다. 추가 지시어를 사용하면 좀 더 복잡한 조건문을 작성할 수 있습니다. . $bg:true; div{ @if $bg{ background:url(&quot;/images/a.jpg&quot;); } } . $color:orange; div{ @if $color == strawberry{ color:#fe2e2e } @else if $color == orange{ color:#fe9a2e; } @else if $color == banana{ color:#ffff00; } @else { color:#2a1b0a; } } . div{ color:#fe9a2e; } . . 조건문 - IF - 예제 . @function limitSize($size){ @if ($size &gt;= 0 and $size &lt;= 200px){ @return 200px; } @else { @return 800px; } } div{ width:limitSize(180px); height:limitSize(340px); } . div{ width:200px; height:800px; } . @mixin positionCenter($w, $h, $p:absolute){ @if( $p == absolute or $p == fixed or not $p == relative or not $p == static ){ width:if(unitless($w), #{$w}px, $w); height:if(unitless($h), #{$h}px, $h); position:$p; top:0; bottom:0; left:0; right:0; margin:auto; } } .box1{ @include positionCenter(10px, 20px); } .box2{ @include positionCenter(50, 50, fixed); } .box3{ @include positionCenter(100, 200, relative); } . .",
            "url": "https://100developer.github.io/blog100d/sass/syntax/2022/06/21/SASS_syntax.html",
            "relUrl": "/sass/syntax/2022/06/21/SASS_syntax.html",
            "date": " • Jun 21, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "UI History",
            "content": "Skeuomorphism . 사용자의 인지를 돕기위해 현실 세계를 반영한 형태의 UI | 디자인하는데 리소스가 많이 들고 쏟아져 나오는 디바이스들에 대한 대응 어려움 | . . Flat design . 2차원 형태로 그림자, 하이라이트등 심도나 차원을 나타내는 요소는 배제됨 | 다양한 디바이스와 스크린 사이드에 맞춰 쉽게 사이즈를 조절하거나 배열 조절 가능 | . . Google Material Design . 구글의 시각적 언어 | 모든 디바이스에 일관성 있는 경험 | 플랫 디자인과 달리 3차원 Z축을 이용해 입체감을 더함 | 디지털 종이들이 Layred layer를 구성 | 각각의 표면 뒤의 그림자가 생성되어 깊이감을 표현 | 사용자에게 정보구조를 표현하기에 더 적함 | .",
            "url": "https://100developer.github.io/blog100d/ui/history/2022/05/26/UI_History.html",
            "relUrl": "/ui/history/2022/05/26/UI_History.html",
            "date": " • May 26, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "실무에 필요한 UX,UI 용어",
            "content": "Fidelity . 충실도, 묘사 / 표현의 정도를 나타냄 . Low Fidelity : 최소한의 구성요소는 다 갖추고 있는 정보 | High Fidelity : 완성에 거의 가까운 형태 | . . Wireframe . 기획단계에서 주로 제작되며, 각 페이지들의 정보와 UI 요소등에 대한 배치를 표현한다. 와이어프레임에 시나리오, 컨텐츠 설명 등이 첨부되면 스토리보드가 된다. . . Storyboard . 서비스의 각 페이지 구성요소나 콘텐츠의 설명 및 페이지간의 이동 흐름, 로직 등을 기술한 문서를 말한다. = 화면설계서, UI문서, 스펙문서, 기획서 . . Mockup . 디자인, 데모 시연 및 평가를 위한 서비스. 제품의 디자인, 일반적으로 최종 버전의 디자인이 되는 경우도 많다 . . Prototype . 서비스에 대한 기능 및 사용성 등의 테스트를 위해 제작되는 동적인 모형, 개발 디자이너 사이의 시각적인 커뮤니케이션 툴이 되기도 하고 사용성 테스트에 종종 사용되기도 한다. . . Affordance . 사용자가 제품 또는 서비스를 인지했을때 어떻게 사용해야 하는지 알거나 디자이너의 의도대로 사용자의 행동을 유도하는 것을 의미 . . IA (Information Architecture) . 제품, 서비스를 구성하는 정보의 구조와 우선순위, 흐름의 설계 등을 포함 .",
            "url": "https://100developer.github.io/blog100d/ux/ui/2022/05/23/UX_term.html",
            "relUrl": "/ux/ui/2022/05/23/UX_term.html",
            "date": " • May 23, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "UX,UI 참고자료",
            "content": "UX UI 참고사이트 . 🔗 co.design : 최신 디자인 뉴스 . 🔗 Medium : 영어 아티클 플랫폼 . 🔗 Techcrunch : 최신 Tech 뉴스 . . UX UI 참고서적 . 디자인과 인간심리 . 사용자를 생각하게 하지마! .",
            "url": "https://100developer.github.io/blog100d/ux/ui/%EC%B0%B8%EA%B3%A0%EC%9E%90%EB%A3%8C/2022/05/23/UX_resource.html",
            "relUrl": "/ux/ui/%EC%B0%B8%EA%B3%A0%EC%9E%90%EB%A3%8C/2022/05/23/UX_resource.html",
            "date": " • May 23, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "github blog 포스트 쓰기",
            "content": "github blog 포스트 . 💻 github 로그인하고 진행 . . code &gt; _posts . . . default 파일 &gt; Raw 파일 클릭 &gt; 전체 복사 . . . . _posts 클릭 &gt; Add file 클릭 &gt; yyyy-mm-dd-제목.md &gt; 붙여넣기 . . 타이틀 / 카테고리 변경 . . 마크다운 쓰는 법 . 🔗 markdown . . commit new file . . . . 포스팅 완성 . . . tag 검색 . .",
            "url": "https://100developer.github.io/blog100d/github/blog/2022/05/15/github_blog_Post.html",
            "relUrl": "/github/blog/2022/05/15/github_blog_Post.html",
            "date": " • May 15, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "github blog 메뉴 만들기",
            "content": "github blog 메뉴 . 💻 github 로그인하고 진행 . . 메뉴 페이지 수정 . . about.md 클릭 🖱 . . 펜모양 클릭 🖱 . . 마크다운 문법으로 수정 . 🔗 markdown . 수정완료후, commit changes . . . 메뉴 추가 ( _pages에서) . Add file &gt; create new file . . layout: page title: About Me (해당 md 파일명) permalink: /about/ (해당 link) . 해당 md 파일에서 상위 code 입력 . . 추후, commit new file . .",
            "url": "https://100developer.github.io/blog100d/github/blog/2022/05/15/github_blog_Menu.html",
            "relUrl": "/github/blog/2022/05/15/github_blog_Menu.html",
            "date": " • May 15, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "github blog 생성하기",
            "content": "fastpages로 github blog 생성 . 💻 github 로그인하고 진행 . . google에서 fastpage 검색 🔎 . 🔗 fastpages . . Setup instructions 클릭 🖱 . . . on this link 클릭 🖱 . 🔗 github Generate . . Repository 생성(create) . . . Setting &gt; Action &gt; New secret &gt; SSH . 🔗 8gwifi.org . . . . . Deploy keys(Allow write access) . . . . . Settings &gt; Actions &gt; General . . . . Actions &gt; initial commit Setup #1 &gt; Re-run jobs . . . . . . Pull requests &gt; Initial Setup &gt; Merge pull request . . . . . Done . .",
            "url": "https://100developer.github.io/blog100d/github/blog/2022/05/15/github_blog_Generate.html",
            "relUrl": "/github/blog/2022/05/15/github_blog_Generate.html",
            "date": " • May 15, 2022"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "안녕하세요! . 백규진입니다. . 신규 이러닝 시스템 및 교육관련 홈페이지 UI/UX [ 기획, 설계, 개발 ] . 웹에이전시에서 다수 프로젝트 진행 [ 50여 홈페이지 개발 ] . 2018년 웹어워드 어학부분 대상 수상작 기획, 디자인 및 개발 . . .",
          "url": "https://100developer.github.io/blog100d/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://100developer.github.io/blog100d/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}